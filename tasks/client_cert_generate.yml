---
- name: Ensure Required Items
  fail:
    msg: "Please ensure '{{ item.use }}' is set"
  when:
    - not item is defined or not item.tst is defined or item.tst | length == 0
  with_items:
    - { tst: target_host, use: "Target Host Variable" }

- name: Set Target Variables
  set_fact:
    target_vars: "{{ hostvars[target_host] }}"

- name: Set target_fqdn when target_host is not localhost
  set_fact:
    target_fqdn: "{{ target_vars.fqdn }}"
  when: target_host != 'localhost'

- name: Set target_fqdn from local_hostname when set
  set_fact:
    target_fqdn: "{{ local_hostname }}"
  delegate_to: localhost
  when: target_host == 'localhost' and local_hostname | length > 0

- shell: hostname
  delegate_to: localhost
  register: host_long
  when: target_host == 'localhost' and local_hostname | length == 0

- name: Set target_fqdn from host_long
  set_fact:
    target_fqdn: "{{ host_long.stdout }}"
  when: target_host == 'localhost' and local_hostname | length == 0

- name: Set certificate filename
  set_fact:
    cert_filename: "{{ target_fqdn }}.ovpn"

- name: Check to see if file exists
  delegate_to: localhost
  stat:
    path: "{{ local_ovpn_base }}/certs/{{ cert_filename }}"
  register: cert_stat

- name: Determine if the generation is needed
  set_fact:
    need_generate: "{{ not cert_stat.stat.exists or force }}"

- include_tasks: ./easy_ovpn_push_keys.yml
  when: need_generate

- name: Push the client key script
  template:
    src: ../templates/easy_ovpn/client_gen.sh.j2
    dest: "/tmp/client_gen.sh"
  when: need_generate

- name: Run the client key script
  shell: bash /tmp/client_gen.sh
  when: need_generate

- name: Generate client cert -- Start with "client.conf"
  shell: cp {{ easy_ovpn_dir }}/client.conf {{ easy_ovpn_certs }}/{{ cert_filename }}
  when: need_generate
  become: true

- name: Generate client cert -- Open <ca>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "<ca>"
  when: need_generate
  become: true

- name: Generate client cert -- Add {{ ovpn_keys_dir }}/ca.crt to {{ easy_ovpn_certs }}/{{ cert_filename }}
  shell: cat {{ ovpn_keys_dir }}/ca.crt >> {{ easy_ovpn_certs }}/{{ cert_filename }}
  when: need_generate
  become: true

- name: Generate client cert -- Close </ca>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "</ca>"
  when: need_generate
  become: true

- name: Generate client cert -- Open <cert>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "<cert>"
  when: need_generate
  become: true

- name: Generate client cert -- Add {{ easy_ovpn_keys }}/{{ target_fqdn }}.crt
  shell: cat {{ easy_ovpn_keys }}/{{ target_fqdn }}.crt >> {{ easy_ovpn_certs }}/{{ cert_filename }}
  when: need_generate
  become: true

- name: Generate client cert -- Close </cert>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "</cert>"
  when: need_generate
  become: true

- name: Generate client cert -- Open <key>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "<key>"
  when: need_generate
  become: true

- name: Generate client cert -- Add {{ easy_ovpn_keys }}/{{ target_fqdn }}.key
  shell: cat {{ easy_ovpn_keys }}/{{ target_fqdn }}.key >> {{ easy_ovpn_certs }}/{{ cert_filename }}
  when: need_generate
  become: true

- name: Generate client cert -- Close </key>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "</key>"
  when: need_generate
  become: true

- name: Generate client cert -- Open <tls-auth>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "<tls-auth>"
  when: need_generate
  become: true

- name: Generate client cert -- Add {{ easy_ovpn_keys }}/{{ ovpn_ta_file }}
  shell: cat {{ easy_ovpn_keys }}/{{ ovpn_ta_file }} >> {{ easy_ovpn_certs }}/{{ cert_filename }}
  when: need_generate
  become: true

- name: Generate client cert -- Close </tls-auth>
  lineinfile:
    dest: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    line: "</tls-auth>"
  when: need_generate
  become: true

- name: Ensure local private certs directory exists
  file:
    path: "{{ local_ovpn_base }}/certs"
    state: directory
  delegate_to: localhost
  when: need_generate

- name: Pull the certificate file to localhost
  synchronize:
    mode: pull
    src: "{{ easy_ovpn_certs }}/{{ cert_filename }}"
    dest: "{{ local_ovpn_base }}/certs/{{ cert_filename }}"
  become: true
  when: need_generate

- include_tasks: ./easy_ovpn_pull_keys.yml
  when: need_generate
